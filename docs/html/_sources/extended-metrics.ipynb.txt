{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Extended Metrics\n",
    "The definition used in this research for extended metrics is to cover anything that is calculated from the basic metrics already covered.  Each extended metric will be covered and will include definition, usage, and a code example."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Staking Reward\n",
    "The staking reward is to total OHM to be minted for this epoch.  Each epoch the staking reward calculated below is minted and this would be considered OHM inflation.  Many other extended metrics are based off of staking reward."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "31053.0"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from web3 import Web3\n",
    "import math\n",
    "w3 = Web3(Web3.HTTPProvider('https://mainnet.infura.io/v3/40f886f8daa347ec901aa7e83d3300de')) # Infura\n",
    "\n",
    "token_abi = open(f\"abis/sohmstaking.abi\", \"r\").read()\n",
    "contract = w3.eth.contract(Web3.toChecksumAddress('0xFd31c7d00Ca47653c6Ce64Af53c1571f9C36566a'), abi=token_abi)\n",
    "\n",
    "epoch = contract.functions.epoch().call()\n",
    "staking_reward = epoch[3] / math.pow(10, 9)\n",
    "staking_reward"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Staking Rebase\n",
    "The staking rebase is the amount of newly minted OHM distributed per OHM staked."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.00575501060350834"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from web3 import Web3\n",
    "import math\n",
    "w3 = Web3(Web3.HTTPProvider('https://mainnet.infura.io/v3/40f886f8daa347ec901aa7e83d3300de')) # Infura\n",
    "\n",
    "staking_abi = open(f\"abis/sohmstaking.abi\", \"r\").read()\n",
    "staking_contract = w3.eth.contract(Web3.toChecksumAddress('0xFd31c7d00Ca47653c6Ce64Af53c1571f9C36566a'), abi=staking_abi)\n",
    "token_abi = open(f\"abis/sohm.abi\", \"r\").read()\n",
    "token_contract = w3.eth.contract(Web3.toChecksumAddress('0x04F2694C8fcee23e8Fd0dfEA1d4f5Bb8c352111F'), abi=token_abi)\n",
    "\n",
    "circ = token_contract.functions.circulatingSupply().call() / math.pow(10, 9)\n",
    "epoch = staking_contract.functions.epoch().call()\n",
    "\n",
    "staking_reward = epoch[3] / math.pow(10, 9)\n",
    "staking_rebase = staking_reward / circ\n",
    "staking_rebase"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Staking APY\n",
    "This metric is somewhat obvious hopefully.  To get a value that matches with the Olympus DAO dashboard the staking_apy below needs to be multiplied by 100."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "53475.26619064352"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from web3 import Web3\n",
    "import math\n",
    "w3 = Web3(Web3.HTTPProvider('https://mainnet.infura.io/v3/40f886f8daa347ec901aa7e83d3300de')) # Infura\n",
    "\n",
    "staking_abi = open(f\"abis/sohmstaking.abi\", \"r\").read()\n",
    "staking_contract = w3.eth.contract(Web3.toChecksumAddress('0xFd31c7d00Ca47653c6Ce64Af53c1571f9C36566a'), abi=staking_abi)\n",
    "token_abi = open(f\"abis/sohm.abi\", \"r\").read()\n",
    "token_contract = w3.eth.contract(Web3.toChecksumAddress('0x04F2694C8fcee23e8Fd0dfEA1d4f5Bb8c352111F'), abi=token_abi)\n",
    "\n",
    "circ = token_contract.functions.circulatingSupply().call() / math.pow(10, 9)\n",
    "epoch = staking_contract.functions.epoch().call()\n",
    "\n",
    "staking_reward = epoch[3] / math.pow(10, 9)\n",
    "staking_rebase = staking_reward / circ\n",
    "staking_apy = math.pow(1 + staking_rebase, 365 * 3) - 1\n",
    "staking_apy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5 Day ROI\n",
    "The 5 day rate is a good metric to use when trying to determine whether to buy bonds which mature after 5 days or to simply buy and stake.  To get the % shown in the dashboard simply multiple by 100 similar to staking_apy above."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.08989692347131362"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from web3 import Web3\n",
    "import math\n",
    "w3 = Web3(Web3.HTTPProvider('https://mainnet.infura.io/v3/40f886f8daa347ec901aa7e83d3300de')) # Infura\n",
    "\n",
    "staking_abi = open(f\"abis/sohmstaking.abi\", \"r\").read()\n",
    "staking_contract = w3.eth.contract(Web3.toChecksumAddress('0xFd31c7d00Ca47653c6Ce64Af53c1571f9C36566a'), abi=staking_abi)\n",
    "token_abi = open(f\"abis/sohm.abi\", \"r\").read()\n",
    "token_contract = w3.eth.contract(Web3.toChecksumAddress('0x04F2694C8fcee23e8Fd0dfEA1d4f5Bb8c352111F'), abi=token_abi)\n",
    "\n",
    "circ = token_contract.functions.circulatingSupply().call() / math.pow(10, 9)\n",
    "epoch = staking_contract.functions.epoch().call()\n",
    "\n",
    "staking_reward = epoch[3] / math.pow(10, 9)\n",
    "staking_rebase = staking_reward / circ\n",
    "five_day_rate = math.pow(1 + staking_rebase, 5 * 3) - 1\n",
    "five_day_rate"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Next Rebase"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Staking TVL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Market Cap"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Percent Staked"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "6704a9ea5c10500a3d4be9b0d53f3ac76674cca4c32c3740114f395c41b7d15d"
  },
  "kernelspec": {
   "display_name": "Python 3.8.10 64-bit ('.venv': poetry)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
